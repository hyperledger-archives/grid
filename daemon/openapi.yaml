# Copyright 2017 Intel Corporation
# Copyright 2019 Bitwise IO, Inc.
# Copyright 2020 Cargill Incorporated
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

openapi: 3.0.0
info:
  version: 0.3.6
  title: Grid Daemon REST API
  description: A REST API providing HTTP/JSON interface to Hyperledger Grid.
  contact:
    name: Hyperledger Grid community
    url: https://grid.hyperledger.org/community/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
externalDocs:
  description: |
    For more information about how to create Sabre batches, please see the
    Sabre documentation.
  url: https://sawtooth.hyperledger.org/docs/sabre/releases/latest/
paths:
  # Transactions
  /batches:
    post:
      tags:
        - Transaction
      summary: Submits a list of transaction batches to the distributed ledger
      externalDocs:
        description:
          For more information about the Batch data structure, see the Sawtooth
          architecture guide
        url: https://sawtooth.hyperledger.org/docs/core/releases/latest/architecture/transactions_and_batches.html
      description: |
        This endpoint can be used to submit batches to the underlying
        distributed ledger. The operation called by this endpoint will depend on
        which distributed ledger is supporting this deployment of Grid.
        Regardless of the underlying ledger, the body of this request must be a
        valid list of Sabre batches.

        If the Grid Daemon is running against a Sawtooth distributed ledger,
        then the batches are forwarded to the `/batches` endpoint of the
        Sawtooth REST API.

        If the Grid Daemon is running against Splinter, then the `service_id`
        query parameter is required for this request. The Grid Daemon will use
        the service ID to forward the transaction to an endpoint on the Splinter
        Daemon for the Scabbard service corresponding to the provided service
        ID.

        The API will return immediately with a status of `202`. There will be
        no `data` object, only a `link` to a `/batch_statuses` endpoint to be
        polled to check the status of submitted batches.
      operationId: post_batches
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/wait"
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: "#/components/schemas/BatchList"
        description: A binary encoded protobuf BatchList
        required: true
      responses:
        "202":
          description: |
            The batch list was submitted for validation but have not yet been
            evaluated. After the server receives the batches for validation, it
            will attempt to execute the transactions contained in each batch in
            the batch list. If each of the transactions in a batch are
            successful, the distributed ledger's state will be updated and Grid
            will receive state delta events from the distributed ledger. The
            Grid Daemon processes these events and updates the Grid database
            accordingly.

            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchStatusLink"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /batch_statuses:
    get:
      tags:
        - Transaction
      summary: Fetches the committed statuses for a set of batches
      description: |
        Fetches an array of objects with a status and id for each batch
        requested. There are four possible statuses with string values
        `'COMMITTED'`, `'INVALID'`, `'PENDING'`, and `'UNKNOWN'`.

        The batch(es) you want to check can be specified using the `id` filter
        parameter. If a `wait` time is specified in the URL, the API will wait
        to respond until all batches are committed, or the time in seconds has
        elapsed. If the value of `wait` is not set (i.e., `?wait&id=...`), or
        it is set to any non-integer value other than `false`, the wait time
        will be just under the API's specified timeout (usually 300).

        Note that because this route does not return full resources, the
        response will not be paginated, and there will be no `head` or
        `paging` properties.
      operationId: get_batch_statuses_by_id
      parameters:
        - name: id
          in: query
          description: A comma-separated list of batch IDs
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/wait"
        - $ref: "#/components/parameters/service_id"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: string
                      example: 89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c
                    status:
                      type: string
                      example: INVALID
                      enum:
                        - COMMITTED
                        - INVALID
                        - PENDING
                        - UNKNOWN
                    invalid_transactions:
                      type: array
                      items:
                        properties:
                          id:
                            type: string
                            example: 540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a
                          message:
                            type: string
                            example: |
                              Verb is \"inc\" but name \"foo\" not in state
                          extended_data:
                            type: string
                            format: byte
                            example: ZXJyb3IgZGF0YQ==
                          link:
                            $ref: "#/components/schemas/BatchStatusLink"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"

  # Location
  /location:
    get:
      tags:
        - Location
      summary: Lists all locations
      operationId: list_locations
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON list of the
            requested locations.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /location/{location_id}:
    get:
      tags:
        - Location
      summary: Fetches a single location with the given ID
      operationId: get_location
      parameters:
        - name: location_id
          in: path
          description: ID of the location to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the location.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"

  # Pike
  /agent:
    get:
      tags:
        - Pike
      summary: Lists all agents
      operationId: list_agents
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON list of the
            requested agents.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /agent/{public_key}:
    get:
      tags:
        - Pike
      summary: Fetches an agent with the given public key
      operationId: get_agent
      parameters:
        - name: public_key
          in: path
          description: Public key of the agent to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the agent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agent"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /organization:
    get:
      tags:
        - Pike
      summary: Lists all organizations
      operationId: list_organizations
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON list of the
            requested organizations.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /organization/{id}:
    get:
      tags:
        - Pike
      summary: Fetches a single organization with the given ID
      operationId: get_organization
      parameters:
        - name: id
          in: path
          description: ID of the organization to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the organization.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /role/{org_id}:
    get:
      tags:
        - Pike
      summary: Lists all roles for a single organization
      operationId: list_roles_for_organization
      parameters:
        - name: org_id
          in: path
          description: Org ID of the organization to list roles for
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON list of the roles for the
            requested organization.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /role/{org_id}/{name}:
    get:
      tags:
        - Pike
      summary: Fetches a role for a single organization
      operationId: get_role
      parameters:
        - name: org_id
          in: path
          description: Org ID of the organization that the role belongs to
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Name of the role to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object representing the role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"

  # Product
  /product:
    get:
      tags:
        - Product
      summary: Lists all products
      operationId: list_products
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON list of the
            requested products.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /product/{product_id}:
    get:
      tags:
        - Product
      summary: Fetches a single product with the given ID
      operationId: get_product
      parameters:
        - name: product_id
          in: path
          description: ID of the product to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the product.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  # Purchase Order
  /purchase_order:
    get:
      tags:
        - Purchase Order
      summary: Lists all purchase orders
      operationId: list_purchase_orders
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON list of the
            requested purchase orders.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseOrderList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /purchase_order/{uid}:
    get:
      tags:
        - Purchase Order
      summary: Fetches a single purchase order with the given UID
      parameters:
        - name: uid
          in: path
          description: ID of the PO to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the purchase order.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseOrder"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /purchase_order/{uid}/version:
    get:
      tags:
        - Purchase Order
      summary: Lists all purchase order versions for a purchase order
      operationId: list_purchase_order_versions
      parameters:
        - name: uid
          in: path
          description: ID of the PO to fetch versions for
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the purchase order versions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseOrderVersionList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /purchase_order/{uid}/version/{version_id}:
    get:
      tags:
        - Purchase Order
      summary: Fetches a single purchase order version with the given ID
      operationId: get_purchase_order_version
      parameters:
        - name: version_id
          in: path
          description: ID of the version to fetch
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: ID of the PO to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the purchase order version.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseOrderVersionList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /purchase_order/{uid}/version/{version_id}/revision:
    get:
      tags:
        - Purchase Order
      summary: Lists all purchase order revisions for a purchase order version
      operationId: list_purchase_order_version_revisions
      parameters:
        - name: version_id
          in: path
          description: ID of the version to fetch
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: ID of the PO to fetch versions for
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the purchase order version revisions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseOrderRevisionList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /purchase_order/{uid}/version/{version_id}/revision/{revision_id}:
    get:
      tags:
        - Purchase Order
      summary: |
        Fetches a single purchase order version revision with the given revision
        ID
      operationId: get_purchase_order_revision
      parameters:
        - name: revision_id
          in: path
          description: ID of the revision to fetch
          required: true
          schema:
            type: number
        - name: version_id
          in: path
          description: ID of the version to fetch
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: ID of the PO to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the purchase order version.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseOrderRevision"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /purchase_order/{uid}/version/{version_id}/revision/latest:
    get:
      tags:
        - Purchase Order
      summary: |
        Fetches a single purchase order version revision with the latest revision
        ID for the given version
      operationId: get_latest_revision_id
      parameters:
        - name: version_id
          in: path
          description: ID of the version to fetch
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: ID of the PO to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the purchase order revision ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseOrderRevision"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"

  # Schema
  /schema:
    get:
      tags:
        - Schema
      summary: Lists all schemas
      operationId: list_grid_schemas
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON list of the
            requested schemas.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /schema/{schema_name}:
    get:
      tags:
        - Schema
      summary: Fetches a single schema with the given name
      operationId: get_schema_by_name
      parameters:
        - name: schema_name
          in: path
          description: Name of the schema to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the schema.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schema"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"

  # Track and Trace
  /record:
    get:
      tags:
        - Track and Trace
      summary: |
        Fetches a list of records, including lists of all updates made to the
        owner and custodian
      operationId: list_records
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON list of the
            requested records.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /record/{record_id}:
    get:
      tags:
        - Track and Trace
      summary: Fetches a single record with the given ID
      description: Fetches a single record with the given record ID
      operationId: get_record
      parameters:
        - name: record_id
          in: path
          description: ID of the record to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Record"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /record/{record_id}/property/{property_name}:
    get:
      tags:
        - Track and Trace
      summary: |
        Fetches a property with the given name from the record with the
        specified ID
      operationId: fetch_property
      parameters:
        - name: record_id
          in: path
          description: ID of the record to fetch a property from
          required: true
          schema:
            type: string
        - name: property_name
          in: path
          description: Name of the property to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Property"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"

components:
  schemas:
    # Location models
    LocationList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Location"
        paging:
          $ref: "#/components/schemas/Paging"
    Location:
      type: object
      properties:
        location_id:
          type: string
          example: 0099474000005
        location_namespace:
          $ref: "#/components/schemas/NamespaceEnum"
        owner:
          type: string
          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyValue"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        last_updated:
          $ref: "#/components/schemas/Timestamp"

    # Pike models
    AgentList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Agent"
        paging:
          $ref: "#/components/schemas/Paging"
    Agent:
      properties:
        public_key:
          type: string
          example: 038bba5708acc262464c9fe30d3de9e905a9a5fa30cedd151dd9cd09ea26d46d00
        org_id:
          type: string
          example: 013600
        active:
          type: boolean
          example: "true"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/Metadata"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        last_updated:
          $ref: "#/components/schemas/Timestamp"
    OrganizationList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Organization"
        paging:
          $ref: "#/components/schemas/Paging"
    Organization:
      type: object
      properties:
        id:
          type: string
          example: philips001
        name:
          type: string
          example: Philips
        locations:
          type: array
          items:
            type: string
            example: 0012276598822
        alternate_ids:
          type: array
          items:
            type: string
            example: test:test
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/Metadata"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        last_updated:
          $ref: "#/components/schemas/Timestamp"
    RoleList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Role"
        paging:
          $ref: "#/components/schemas/Paging"
    Role:
      type: object
      properties:
        name:
          type: string
          example: alpha.Drivers
        org_id:
          type: string
          example: 314156
        permissions:
          type: array
          items:
            type: string
            example: tank::can_drive
        allowed_organizations:
          type: array
          items:
            type: string
            example: beta
        super_roles:
          type: array
          items:
            type: string
            example: beta.Drivers
        inherit_from:
          type: array
          items:
            type: string
            example: beta.Tank
        last_updated:
          $ref: "#/components/schemas/Timestamp"

    # Product models
    ProductList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        paging:
          $ref: "#/components/schemas/Paging"
    Product:
      type: object
      properties:
        product_id:
          type: string
          example: 00122765988220
        product_address:
          type: string
          example: 621dee0201000000000000000000000000000000000000000000000012276598822000
        product_namespace:
          $ref: "#/components/schemas/NamespaceEnum"
        owner:
          type: string
          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyValue"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        last_updated:
          $ref: "#/components/schemas/Timestamp"

    # Purchase Order models
    PurchaseOrder:
      type: object
      properties:
        uid:
          type: string
          example: 0099474000005
        workflow_state:
          type: string
          example: ACCEPTED
        accepted_version_id:
          type: string
          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
        version_ids:
          type: array
          items:
            type: string
        is_closed:
          type: boolean
          example: false
        service_id:
          $ref: "#/components/schemas/ServiceID"
    PurchaseOrderList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PurchaseOrder"
        paging:
          $ref: "#/components/schemas/Paging"
    PurchaseOrderVersion:
      properties:
        version_id:
          type: string
          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
        workflow_state:
          type: string
          example: ISSUED
        is_draft:
          type: boolean
          example: true
        current_revision_id:
          type: number
          example: 1
        revisions:
          type: array
          items:
            type: string
            example: daae9b58726f4c9364b6cae2fa7c9c24
        service_id:
          $ref: "#/components/schemas/ServiceID"
    PurchaseOrderVersionList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PurchaseOrderVersion"
        paging:
          $ref: "#/components/schemas/Paging"
    PurchaseOrderRevision:
      properties:
        revision_id:
          type: number
          example: 1
        submitter:
          type: string
          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
        created_at:
          $ref: "#/components/schemas/Timestamp"
        order_xml_v3_4:
          type: string
          example: "<xml content>"
        service_id:
          $ref: "#/components/schemas/ServiceID"
    PurchaseOrderRevisionList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PurchaseOrderRevision"
        paging:
          $ref: "#/components/schemas/Paging"

    # Schema models
    SchemaList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Schema"
        paging:
          $ref: "#/components/schemas/Paging"
    Schema:
      properties:
        name:
          type: string
          example: Lightbulb
        description:
          type: string
          example: Example Lightbulb schema
        owner:
          type: string
          example: philips001
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyDefinition"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        last_updated:
          $ref: "#/components/schemas/Timestamp"
    PropertyDefinition:
      properties:
        name:
          type: string
          example: size
        data_type:
          $ref: "#/components/schemas/DataTypeEnum"
        description:
          type: string
          example: Lightbulb radius, in millimeters
        required:
          type: boolean
          example: true
        number_exponent:
          type: integer
          format: int32
          example: -6
        enum_options:
          type: array
          items:
            type: string
          example:
            - filament
            - CF
            - LED
        struct_properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyDefinition"
        service_id:
          $ref: "#/components/schemas/ServiceID"
    DataTypeEnum:
      type: string
      enum:
        - BYTES
        - BOOLEAN
        - NUMBER
        - STRING
        - ENUM
        - STRUCT
        - LOCATION
    PropertyValue:
      type: object
      properties:
        name:
          type: string
          example: brand_name
        data_type:
          type: string
          example: boolean
        bytes_value:
          $ref: "#/components/schemas/BytesValue"
        boolean_value:
          type: boolean
          example: false
        number_value:
          type: integer
          format: int64
          example: 0
        string_value:
          type: string
          example: mybrand
        enum_value:
          type: integer
          format: int32
          example: 0
        struct_values:
          $ref: "#/components/schemas/StructValue"
        lat_long_value:
          $ref: "#/components/schemas/LatLong"
        service_id:
          $ref: "#/components/schemas/ServiceID"
    BytesValue:
      type: string
      format: byte
      example: "AQIDBA=="
    LatLong:
      type: object
      properties:
        latitude:
          type: integer
          example: 46786299
        longitude:
          type: integer
          example: -92051336
    StructPropertyValue:
      type: object
      properties:
        name:
          type: string
          example: location
        type:
          $ref: "#/components/schemas/DataTypeEnum"
        value:
          oneOf:
            - type: string
            - type: boolean
            - type: integer
              format: int64
            - type: integer
              format: int32
            - $ref: "#/components/schemas/StructValue"
            - $ref: "#/components/schemas/LatLong"
            - $ref: "#/components/schemas/BytesValue"
          example: "AQIDBA=="
    StructValue:
      type: array
      items:
        $ref: "#/components/schemas/StructPropertyValue"

    Paging:
      type: object
      properties:
        current:
          type: string
          description: Link to the current page
          example: /agent?offset0&limit=10
        offset:
          type: integer
          description: Index of first element in page
          example: 0
        limit:
          type: integer
          description: The maximum number of elements per page
          example: 10
        total:
          type: integer
          description: The total number of elements that exist
          example: 1000
        prev:
          type: string
          description: Link to previous page
          example: /agent?offset=0&limit=10
        next:
          type: string
          description: Link to next page
          example: /agent?offset=10&limit=10
        last:
          type: string
          description: Link to last page
          example: /agent?offset100&limit=10

    # Track and Trace models
    RecordList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Record"
        paging:
          $ref: "#/components/schemas/Paging"
    Record:
      type: object
      properties:
        record_id:
          type: string
          example: 7h15-45537-15-br173
        schema:
          type: string
          example: Lightbulb
        owner:
          type: string
          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
        custodian:
          type: string
          example: 02fb5b3a093e20e420ecf9c5839215e74c97f49eb51889069eb87bc6f62ceca8dd
        properties:
          type: array
          items:
            $ref: "#/components/schemas/Property"
        proposals:
          type: array
          items:
            $ref: "#/components/schemas/Proposal"
        owner_updates:
          type: array
          items:
            $ref: "#/components/schemas/AssociatedAgent"
        custodian_updates:
          type: array
          items:
            $ref: "#/components/schemas/AssociatedAgent"
        final:
          type: boolean
        service_id:
          $ref: "#/components/schemas/ServiceID"
    AssociatedAgent:
      type: object
      properties:
        agent_id:
          type: string
          example: 02fb5b3a093e20e420ecf9c5839215e74c97f49eb51889069eb87bc6f62ceca8dd
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        service_id:
          $ref: "#/components/schemas/ServiceID"
    ReportedValue:
      type: object
      properties:
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        value:
          oneOf:
            - type: string
            - type: boolean
            - type: integer
              format: int64
            - type: integer
              format: int32
            - $ref: "#/components/schemas/StructValue"
            - $ref: "#/components/schemas/LatLong"
            - $ref: "#/components/schemas/BytesValue"
        reporter:
          type: object
          properties:
            metadata:
              type: object
              example: { agent_name: "Smith" }
            public_key:
              type: string
              example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
            service_id:
              type: string
              example: 01234567-0123-0123-0123-012345678901::grid-scabbard-a
        service_id:
          $ref: "#/components/schemas/ServiceID"
    Property:
      type: object
      properties:
        name:
          type: string
          example: location
        record_id:
          type: string
          example: 7h15-45537-15-br173
        data_type:
          $ref: "#/components/schemas/DataTypeEnum"
        authorized_reporters:
          type: array
          items:
            type: string
            example:
              - 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
              - 0364edd42bd9b2dea1315e2da820b569665f96e36c44b267ceeac488cfdc03bf61
        value:
          $ref: "#/components/schemas/ReportedValue"
        updates:
          type: array
          items:
            $ref: "#/components/schemas/ReportedValue"
        service_id:
          $ref: "#/components/schemas/ServiceID"
    ProposalRoleEnum:
      type: string
      enum:
        - OWNER
        - CUSTODIAN
        - REPORTER
    ProposalStatusEnum:
      description: Status of a proposal
      type: string
      enum:
        - OPEN
        - ACCEPTED
        - REJECTED
        - CANCELED
    Proposal:
      type: object
      properties:
        receiving_agent:
          type: string
          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
        issuing_agent:
          type: string
          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
        role:
          $ref: "#/components/schemas/ProposalRoleEnum"
        properties:
          type: array
          items:
            type: string
        status:
          $ref: "#/components/schemas/ProposalStatusEnum"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        service_id:
          $ref: "#/components/schemas/ServiceID"

    # Transaction models
    TransactionHeader:
      properties:
        batcher_public_key:
          type: string
          example: 02d260a46457a064733153e09840c322bee1dff34445d7d49e19e60abd18fd0758
        dependencies:
          type: array
          items:
            type: string
            example: 1baee350bdb60bcee60e3d325d43283cf830b4c23b2cb17d3bb43935bd7af3761c2bee79847c72a9e396a9ae58f48add4e43f94eb83f84442c6085c1dd5d4dbe
        family_name:
          type: string
          example: intkey
        family_version:
          type: string
          example: "1.0"
        inputs:
          type: array
          items:
            type: string
            example: 1cf12650d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c
        nonce:
          type: string
          example: QAApS4L
        outputs:
          type: array
          items:
            type: string
            example: 1cf12650d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c
        payload_sha512:
          type: string
          example: fb6135ef73f4fe77367f9384b3bbbb158f4b8603c9d612157108e5c271868fce2242ee4abd7a29397ba63780c3ccab13783dfd4d9f0167beda03cdb0e37b87f4
        signer_public_key:
          type: string
          example: 038bba5708acc262464c9fe30d3de9e905a9a5fa30cedd151dd9cd09ea26d46d00
    Transaction:
      properties:
        header:
          $ref: "#/components/schemas/TransactionHeader"
        header_signature:
          type: string
          example: 540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a
        payload:
          type: string
          format: binary
    BatchHeader:
      properties:
        signer_public_key:
          type: string
          example: 038bba5708acc262464c9fe30d3de9e905a9a5fa30cedd151dd9cd09ea26d46d00
        transaction_ids:
          type: array
          items:
            type: string
            example: 540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a
    Batch:
      properties:
        header:
          $ref: "#/components/schemas/BatchHeader"
        header_signature:
          type: string
          example: 89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c
        transactions:
          type: array
          items:
            $ref: "#/components/schemas/Transaction"
    BatchList:
      properties:
        batches:
          type: array
          items:
            $ref: "#/components/schemas/Batch"
    BatchStatusLink:
      type: string
      example: https://api.grid.com/state?head=65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd

    # Shared models
    Timestamp:
      type: integer
      example: 1557949075
    Metadata:
      type: object
      properties:
        key:
          type: string
          example: industry
        value:
          type: string
          example: electronics
    ServiceID:
      type: string
      example: "12345-QWERTY:gsAA"
    NamespaceEnum:
      type: string
      enum:
        - UNSET_NAMESPACE
        - GS1

  parameters:
    batch_id:
      name: batch_id
      in: path
      required: true
      description: |
        The Batch ID uniquely identifies a batch. It is a signature derived from
        signing the batch header with the batcher's key.
      schema:
        type: string
    service_id:
      name: service_id
      in: query
      description: |
        The ID of the service the request should be sent to. This parameter is
        required if running on Splinter.

        Format: \<circuit-id\>::\<service-id\>
      required: false
      schema:
        type: string
    wait:
      name: wait
      in: query
      description: |
        The number of seconds to wait for batches to be committed before
        returning.
      schema:
        type: integer
    page_offset:
      name: offset
      in: query
      description: |
        The index of the first element to be in the page
      schema:
        type: integer
    page_limit:
      name: limit
      in: query
      description: |
        The maximum number of elements in a page
      schema:
        type: integer

  responses:
    # Error responses
    400BadRequest:
      description: |
        The Grid Daemon REST API could not understand the request due to invalid
        syntax. Normally this will indicate an invalid query parameter or a
        malformed payload.
      content:
        application/json:
          schema:
            type: string
            example: |
              Circuit ID is not present, but Grid is running in Splinter mode.
    404NotFound:
      description: |
        The requested resource did not exist. This can either mean that the
        endpoint is invalid, that there is no resource with the specified ID.
      content:
        application/json:
          schema:
            type: string
            example: "Not Found Error: No resource with that ID exists."
    500ServerError:
      description: |
        Something went wrong within the Grid Daemon. This normally is not
        something that the user has control over. If this type of error occurs,
        the message returned by the REST API may be generic. The server admin
        may have to look through the Grid Daemon service's logs to determine
        the cause of the server error.
      content:
        application/json:
          schema:
            type: string
            example: Internal Server Error
    503ServiceUnavailable:
      description: |
        The Grid Daemon service or a connected service is unavailable. This can
        occur when the Grid Daemon cannot reach the underlying distributed
        ledger service or the Grid database.
      content:
        application/json:
          schema:
            type: string
            example: Service Unavailable
