# Copyright 2018-2020 Cargill Incorporated
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[package]
name = "grid-sdk"
version = "0.4.1"
authors = ["Cargill Incorporated"]
description = """\
    Hyperledger Grid is a platform for building supply chain solutions \
    that include distributed ledger components. It provides a growing \
    set of tools that accelerate development for supply chain smart contracts\
    and client interfaces.
"""
homepage = "https://grid.hyperledger.org"
edition = "2018"
license = "Apache-2.0"


[dependencies]
actix-web-4 = {package = "actix-web", version = "4", optional = true, default-features = false, features = ["macros"] }
base64 = { version = "0.13", optional = true }
cfg-if = { version = "1", optional = true }
chrono = { version = "0.4", optional = true }
diesel = { version = "1.0", features = ["chrono", "r2d2", "serde_json"], optional = true }
diesel_migrations = { version = "1.4", optional = true }
log = { version = "0.4", optional = true }
futures = { version = "0.3", optional = true }
futures-util = { version = "0.3", optional = true }
http = { version = "0.2", optional = true }
reqwest = { version = "0.10.1", features = ["blocking", "json"], optional = true }
protobuf = "2.19"
regex = { version = "1", optional = true }
sabre-sdk = { version = "0.5", optional = true }
sawtooth-sdk = { version = "0.4", features = ["transact-compat"], optional = true }
serde = { version = "1.0", features = ["derive"] }
serde_derive = { version = "1.0" }
serde_json = { version = "1.0", optional = true }
transact = { version = "0.4", optional = true }
url = { version = "2.1", optional = true, features = ["serde"] }
uuid = { version = "0.8", features = ["v4"], optional = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
rust-crypto-wasm = "0.3"
sabre-sdk = "0.5"

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
cylinder = { version = "0.2.2", features = ["key-load", "jwt"], optional = true}
rust-crypto = "0.2"
sawtooth-sdk = "0.4"
quick-xml = { version = "0.22", features = [ "serialize" ], optional = true }
libc = { version = "0.2.94", optional = true}
tempfile = "3"

[build-dependencies]
protoc-rust = "2.14"
glob = "0.3"

[dev-dependencies]
cylinder = { version = "0.2" }
mockito = "0.30"
pretty_assertions = "1"
actix-rt = "1.1.1"

[features]
default = []

stable = [
    # The stable feature extends default:
    "default",
    # The following features are stable:
    "backend",
    "backend-sawtooth",
    "backend-splinter",
    "client",
    "client-reqwest",
    "data-validation",
    "location",
    "pike",
    "postgres",
    "product",
    "product-gdsn",
    "purchase-order",
    "rest-api",
    "rest-api-endpoint-agent",
    "rest-api-endpoint-batches",
    "rest-api-endpoint-location",
    "rest-api-endpoint-organization",
    "rest-api-endpoint-product",
    "rest-api-endpoint-purchase-order",
    "rest-api-endpoint-role",
    "rest-api-endpoint-schema",
    "rest-api-resources",
    "rest-api-resources-agent",
    "rest-api-resources-batches",
    "rest-api-resources-location",
    "rest-api-resources-organization",
    "rest-api-resources-product",
    "rest-api-resources-purchase-order",
    "rest-api-resources-role",
    "rest-api-resources-schema",
    "schema",
    "sqlite",
    "workflow"
]

experimental = [
    # The experimental feature extends stable:
    "stable",
    # The following features are experimental:
    "batch-processor",
    "batch-submission",
    "batch-tracking",
    "batch-store",
    "proxy",
    "proxy-run",
    "proxy-client",
    "rest-api-actix-web-4",
    "rest-api-actix-web-4-run",
    "rest-api-endpoint-proxy",
    "rest-api-endpoint-record",
    "rest-api-endpoint-submit",
    "rest-api-resources-batch-tracking",
    "rest-api-resources-submit",
    "rest-api-resources-track-and-trace",
    "track-and-trace"
]

backend = ["base64", "futures", "url"]
backend-sawtooth = ["backend", "uuid"]
backend-splinter = ["backend", "reqwest"]
client = ["log"]
client-reqwest = ["client", "reqwest"]
data-validation = [ "libc", "quick-xml", "reqwest"]
location = ["pike", "schema"]
pike = ["cfg-if", "workflow"]
product-gdsn = [ "libc", "quick-xml", "reqwest" ]
purchase-order = ["pike", "regex"]
product = ["pike", "schema"]
proxy = []
proxy-client = ["proxy", "serde_json", "rest-api-resources"]
proxy-client-reqwest = ["reqwest", "proxy-client"]
proxy-run = ["proxy-client", "rest-api-endpoint-proxy"]
schema = ["pike"]
track-and-trace = ["base64"]
batch-tracking = ["transact"]
batch-processor = ["batch-store", "backend", "log", "reqwest", "uuid"]
batch-store = ["chrono"]
batch-submission = []

postgres = ["chrono", "diesel/postgres", "diesel_migrations", "log"]
rest-api = []
rest-api-actix-web-4 = [
    "actix-web-4",
    "backend",
    "futures",
    "futures-util",
    "rest-api",
    "rest-api-resources",
    "url"
]
rest-api-actix-web-4-run = ["rest-api-endpoint-submit"]
rest-api-endpoint-agent = ["pike", "rest-api-resources-agent"]
rest-api-endpoint-batches = ["backend", "rest-api-resources-batches"]
rest-api-endpoint-location = ["location", "rest-api-resources-location"]
rest-api-endpoint-organization = ["pike", "rest-api-resources-organization"]
rest-api-endpoint-product = ["product", "rest-api-resources-product"]
rest-api-endpoint-proxy = ["proxy-client"]
rest-api-endpoint-purchase-order = ["purchase-order", "rest-api-resources-purchase-order"]
rest-api-endpoint-record = ["rest-api-resources-track-and-trace", "track-and-trace"]
rest-api-endpoint-role = ["pike", "rest-api-resources-role"]
rest-api-endpoint-schema = ["rest-api-resources-schema", "schema"]
rest-api-endpoint-submit = ["batch-store", "rest-api-resources-submit"]
rest-api-resources = ["rest-api"]
rest-api-resources-agent = ["pike", "rest-api-resources", "serde_json"]
rest-api-resources-batches = ["backend", "rest-api-resources"]
rest-api-resources-batch-tracking = [
    "batch-tracking",
    "rest-api-resources",
    "transact/protocol-sabre",
]
rest-api-resources-location = ["location", "rest-api-resources"]
rest-api-resources-organization = ["pike", "rest-api-resources"]
rest-api-resources-product = ["product", "rest-api-resources"]
rest-api-resources-purchase-order = ["purchase-order", "rest-api-resources"]
rest-api-resources-role = ["pike", "rest-api-resources"]
rest-api-resources-schema = ["rest-api-resources", "schema"]
rest-api-resources-submit = ["batch-store", "cylinder", "rest-api-resources", "sabre-sdk"]
rest-api-resources-track-and-trace = ["rest-api-resources", "track-and-trace"]
sqlite = ["chrono", "diesel/sqlite", "diesel_migrations", "log"]
workflow = []
